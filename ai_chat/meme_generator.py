"""
AI Meme Generator for Expense Tracker
Analyzes weekly spending patterns and generates humorous memes
"""

from datetime import datetime, timedelta
from django.db.models import Sum
from django.utils.translation import gettext as _
from django.core.cache import cache
import random
import hashlib
from typing import Dict, List, Any
from transactions.models import Transaction

class MemeGenerator:
    def __init__(self, language='vi'):
        self.language = language
        
        # Meme templates with their trigger conditions
        self.meme_templates = {
            'drake_pointing': {
                'name': 'Drake Pointing',
                'image': 'drake_pointing.jpg',
                'format': 'comparison',
                'personality_weights': {
                    'coffee_addict': 3,
                    'foodie_explorer': 2,
                    'saving_master': 1,
                    'balanced_spender': 2
                }
            },
            'success_kid': {
                'name': 'Success Kid',
                'image': 'success_kid.jpg', 
                'format': 'achievement',
                'personality_weights': {
                    'coffee_addict': 1,
                    'foodie_explorer': 1,
                    'saving_master': 3,
                    'balanced_spender': 2
                }
            },
            'this_is_fine': {
                'name': 'This is Fine',
                'image': 'this_is_fine.jpg',
                'format': 'ironic',
                'personality_weights': {
                    'coffee_addict': 3,
                    'foodie_explorer': 3,
                    'saving_master': 0,
                    'balanced_spender': 2
                }
            },
            'expanding_brain': {
                'name': 'Expanding Brain',
                'image': 'expanding_brain.jpg',
                'format': 'escalation',
                'personality_weights': {
                    'coffee_addict': 2,
                    'foodie_explorer': 2,
                    'saving_master': 2,
                    'balanced_spender': 3
                }
            },
            'distracted_boyfriend': {
                'name': 'Distracted Boyfriend',
                'image': 'distracted_boyfriend.jpg',
                'format': 'temptation',
                'personality_weights': {
                    'coffee_addict': 3,
                    'foodie_explorer': 3,
                    'saving_master': 1,
                    'balanced_spender': 2
                }
            },
            'two_buttons': {
                'name': 'Two Buttons',
                'image': 'two_buttons.jpg',
                'format': 'dilemma',
                'personality_weights': {
                    'coffee_addict': 2,
                    'foodie_explorer': 2,
                    'saving_master': 3,
                    'balanced_spender': 3
                }
            },
            'change_my_mind': {
                'name': 'Change My Mind',
                'image': 'change_my_mind.jpg',
                'format': 'statement',
                'personality_weights': {
                    'coffee_addict': 2,
                    'foodie_explorer': 2,
                    'saving_master': 3,
                    'balanced_spender': 2
                }
            },
            'woman_yelling_cat': {
                'name': 'Woman Yelling at Cat',
                'image': 'woman_yelling_cat.jpg',
                'format': 'confrontation',
                'personality_weights': {
                    'coffee_addict': 3,
                    'foodie_explorer': 2,
                    'saving_master': 1,
                    'balanced_spender': 2
                }
            },
            'stonks': {
                'name': 'Stonks',
                'image': 'stonks.jpg',
                'format': 'trend',
                'personality_weights': {
                    'coffee_addict': 1,
                    'foodie_explorer': 1,
                    'saving_master': 3,
                    'balanced_spender': 2
                }
            },
            'panik_kalm': {
                'name': 'Panik Kalm',
                'image': 'panik_kalm.jpg',
                'format': 'emotional_journey',
                'personality_weights': {
                    'coffee_addict': 2,
                    'foodie_explorer': 2,
                    'saving_master': 2,
                    'balanced_spender': 3
                }
            },
            'galaxy_brain': {
                'name': 'Galaxy Brain',
                'image': 'galaxy_brain.jpg',
                'format': 'enlightenment',
                'personality_weights': {
                    'coffee_addict': 3,
                    'foodie_explorer': 3,
                    'saving_master': 2,
                    'balanced_spender': 2
                }
            }
        }
        
        # Personality-specific meme texts
        self.meme_texts = {
            'vi': {
                'coffee_addict': {
                    'drake_pointing': {
                        'top': 'T√¥i s·∫Ω ti·∫øt ki·ªám tu·∫ßn n√†y',
                        'bottom': 'ƒê√£ order coffee 15 ly'
                    },
                    'success_kid': 'Ch·ªâ u·ªëng 10 ly coffee tu·∫ßn n√†y thay v√¨ 15!',
                    'this_is_fine': 'Chi 375k cho coffee tu·∫ßn n√†y. This is fine.',
                    'expanding_brain': [
                        'Coffee 25k/ly',
                        'Coffee premium 35k/ly', 
                        'Coffee + b√°nh 50k',
                        'Coffee shop hopping 400k/tu·∫ßn'
                    ],
                    'distracted_boyfriend': {
                        'boyfriend': 'T√¥i',
                        'girlfriend': 'K·∫ø ho·∫°ch ti·∫øt ki·ªám',
                        'other_woman': 'Coffee m·ªõi ra'
                    },
                    'two_buttons': {
                        'button1': 'Ti·∫øt ki·ªám ti·ªÅn',
                        'button2': 'U·ªëng coffee 5 ly/ng√†y'
                    },
                    'change_my_mind': 'Coffee kh√¥ng ph·∫£i chi ph√≠, ƒë√≥ l√† ƒë·∫ßu t∆∞ nƒÉng su·∫•t',
                    'woman_yelling_cat': {
                        'woman': 'B·∫†N ƒê√É CHI BAO NHI√äU CHO COFFEE?!',
                        'cat': '...ch·ªâ 375k th√¥i m√†'
                    },
                    'stonks': 'Coffee addiction üìà',
                    'panik_kalm': {
                        'panik1': 'Nh√¨n bill coffee tu·∫ßn n√†y',
                        'kalm': 'Nh·ªõ ra m√¨nh l√†m vi·ªác hi·ªáu qu·∫£ h∆°n',
                        'panik2': 'Bill tu·∫ßn sau s·∫Ω cao h∆°n'
                    },
                    'galaxy_brain': [
                        'U·ªëng coffee ƒë·ªÉ t·ªânh t√°o',
                        'U·ªëng coffee ƒë·ªÉ networking',
                        'U·ªëng coffee ƒë·ªÉ s·ªëng c√≤n',
                        'Coffee = oxygen'
                    ]
                },
                'foodie_explorer': {
                    'drake_pointing': {
                        'top': 'N·∫•u ƒÉn t·∫°i nh√†',
                        'bottom': 'Kh√°m ph√° qu√°n m·ªõi m·ªói ng√†y'
                    },
                    'success_kid': 'T√¨m ƒë∆∞·ª£c qu√°n ngon m√† kh√¥ng ƒë·∫Øt!',
                    'this_is_fine': 'Chi 1.2M cho ƒÉn u·ªëng tu·∫ßn n√†y. ƒê√≥ l√† ƒë·∫ßu t∆∞!',
                    'expanding_brain': [
                        'ƒÇn c∆°m b√¨nh d√¢n',
                        'Th·ª≠ m√≥n m·ªõi',
                        'Check-in qu√°n trendy',
                        'Food tour cu·ªëi tu·∫ßn'
                    ],
                    'distracted_boyfriend': {
                        'boyfriend': 'T√¥i',
                        'girlfriend': 'Ng√¢n s√°ch ƒÉn u·ªëng',
                        'other_woman': 'Qu√°n m·ªõi viral'
                    },
                    'two_buttons': {
                        'button1': 'N·∫•u ƒÉn t·∫°i nh√†',
                        'button2': 'Th·ª≠ qu√°n m·ªõi m·ªói ng√†y'
                    },
                    'change_my_mind': 'ƒÇn ngon l√† ƒë·∫ßu t∆∞ cho h·∫°nh ph√∫c tinh th·∫ßn',
                    'woman_yelling_cat': {
                        'woman': 'SAO L·∫†I CHI 1.2M CHO ƒÇN U·ªêNG?!',
                        'cat': '...nh∆∞ng m√† ngon l·∫Øm'
                    },
                    'stonks': 'Food exploration üìà',
                    'panik_kalm': {
                        'panik1': 'Check bill ƒÉn u·ªëng tu·∫ßn n√†y',
                        'kalm': 'Nh·ªõ ra m√¨nh ƒë√£ ƒÉn nh·ªØng m√≥n ngon tuy·ªát v·ªùi',
                        'panik2': 'Tu·∫ßn sau c√≥ th√™m 5 qu√°n m·ªõi'
                    },
                    'galaxy_brain': [
                        'ƒÇn ƒë·ªÉ s·ªëng',
                        'ƒÇn ƒë·ªÉ tr·∫£i nghi·ªám',
                        'ƒÇn ƒë·ªÉ check-in',
                        'ƒÇn = ngh·ªá thu·∫≠t s·ªëng'
                    ]
                },
                'saving_master': {
                    'drake_pointing': {
                        'top': 'Chi ti√™u kh√¥ng c·∫ßn thi·∫øt',
                        'bottom': 'Ti·∫øt ki·ªám m·ªçi ƒë·ªìng xu'
                    },
                    'success_kid': 'Ti·∫øt ki·ªám ƒë∆∞·ª£c 800k tu·∫ßn n√†y!',
                    'this_is_fine': 'Ti·∫øt ki·ªám 50% thu nh·∫≠p. Perfectly normal.',
                    'expanding_brain': [
                        'Ti·∫øt ki·ªám 100k/tu·∫ßn',
                        'Ti·∫øt ki·ªám 300k/tu·∫ßn',
                        'Ti·∫øt ki·ªám 500k/tu·∫ßn',
                        'Ti·∫øt ki·ªám = life goal'
                    ],
                    'distracted_boyfriend': {
                        'boyfriend': 'T√¥i',
                        'girlfriend': 'Chi ti√™u h·ª£p l√Ω',
                        'other_woman': 'Ti·∫øt ki·ªám t·ªëi ƒëa'
                    },
                    'two_buttons': {
                        'button1': 'Mua ƒë·ªì c·∫ßn thi·∫øt',
                        'button2': 'Ti·∫øt ki·ªám th√™m 100k n·ªØa'
                    },
                    'change_my_mind': 'Ti·∫øt ki·ªám 50% thu nh·∫≠p l√† b√¨nh th∆∞·ªùng',
                    'woman_yelling_cat': {
                        'woman': 'B·∫†N PH·∫¢I S·ªêNG CU·ªòC S·ªêNG!',
                        'cat': '...nh∆∞ng m√† ti·∫øt ki·ªám ƒë∆∞·ª£c 800k'
                    },
                    'stonks': 'Saving rate üìà',
                    'panik_kalm': {
                        'panik1': 'Nh√¨n ng∆∞·ªùi kh√°c chi ti√™u',
                        'kalm': 'Nh·ªõ ra m√¨nh ƒë√£ ti·∫øt ki·ªám ƒë∆∞·ª£c 80%',
                        'panik2': 'H·ªç s·∫Ω nghƒ© m√¨nh keo ki·ªát'
                    },
                    'galaxy_brain': [
                        'Ti·∫øt ki·ªám ƒë·ªÉ mua nh√†',
                        'Ti·∫øt ki·ªám ƒë·ªÉ an to√†n t√†i ch√≠nh',
                        'Ti·∫øt ki·ªám ƒë·ªÉ t·ª± do t√†i ch√≠nh',
                        'Ti·∫øt ki·ªám = t·ªëi cao'
                    ]
                },
                'balanced_spender': {
                    'drake_pointing': {
                        'top': 'Chi ti√™u b·ª´a b√£i',
                        'bottom': 'C√¢n b·∫±ng thu chi h·ª£p l√Ω'
                    },
                    'success_kid': 'Th√°ng n√†y c√¢n b·∫±ng ƒë∆∞·ª£c thu chi!',
                    'this_is_fine': 'Chi ti√™u v·ª´a ph·∫£i, ti·∫øt ki·ªám v·ª´a ph·∫£i. Balanced.',
                    'expanding_brain': [
                        'L·∫≠p k·∫ø ho·∫°ch chi ti√™u',
                        'Theo d√µi t·ª´ng giao d·ªãch',
                        'Ph√¢n b·ªë ng√¢n s√°ch',
                        'Zen master c·ªßa t√†i ch√≠nh'
                    ],
                    'distracted_boyfriend': {
                        'boyfriend': 'T√¥i',
                        'girlfriend': 'Ng√¢n s√°ch c√¢n b·∫±ng',
                        'other_woman': 'Sale 50% off'
                    },
                    'two_buttons': {
                        'button1': 'Chi ti√™u theo k·∫ø ho·∫°ch',
                        'button2': 'Linh ho·∫°t v·ªõi ng√¢n s√°ch'
                    },
                    'change_my_mind': 'C√¢n b·∫±ng thu chi l√† ch√¨a kh√≥a h·∫°nh ph√∫c',
                    'woman_yelling_cat': {
                        'woman': 'B·∫†N QU·∫¢N L√ù TI·ªÄN NH∆Ø TH·∫æ N√ÄO?',
                        'cat': '...v·ª´a ph·∫£i th√¥i'
                    },
                    'stonks': 'Financial balance üìä',
                    'panik_kalm': {
                        'panik1': 'Th√°ng n√†y chi nhi·ªÅu qu√°',
                        'kalm': 'Nh∆∞ng v·∫´n trong k·∫ø ho·∫°ch',
                        'panik2': 'Th√°ng sau ph·∫£i c√¢n b·∫±ng l·∫°i'
                    },
                    'galaxy_brain': [
                        'Chi ti√™u c√≥ k·∫ø ho·∫°ch',
                        'Ti·∫øt ki·ªám c√≥ m·ª•c ti√™u',
                        'ƒê·∫ßu t∆∞ c√≥ chi·∫øn l∆∞·ª£c',
                        'T√†i ch√≠nh = zen'
                    ]
                }
            },
            'en': {
                'coffee_addict': {
                    'drake_pointing': {
                        'top': 'I will save money this week',
                        'bottom': 'Already ordered 15 coffees'
                    },
                    'success_kid': 'Only had 10 coffees this week instead of 15!',
                    'this_is_fine': 'Spent 375k on coffee this week. This is fine.',
                    'expanding_brain': [
                        'Coffee 25k/cup',
                        'Premium coffee 35k/cup',
                        'Coffee + pastry 50k',
                        'Coffee shop hopping 400k/week'
                    ]
                },
                'foodie_explorer': {
                    'drake_pointing': {
                        'top': 'Cook at home',
                        'bottom': 'Explore new restaurants daily'
                    },
                    'success_kid': 'Found a delicious place that\'s not expensive!',
                    'this_is_fine': 'Spent 1.2M on food this week. It\'s an investment!',
                    'expanding_brain': [
                        'Local street food',
                        'Try new dishes',
                        'Check-in trendy places',
                        'Weekend food tours'
                    ]
                },
                'saving_master': {
                    'drake_pointing': {
                        'top': 'Unnecessary spending',
                        'bottom': 'Save every penny'
                    },
                    'success_kid': 'Saved 800k this week!',
                    'this_is_fine': 'Saved 50% of income. Perfectly normal.',
                    'expanding_brain': [
                        'Save 100k/week',
                        'Save 300k/week', 
                        'Save 500k/week',
                        'Saving = life goal'
                    ]
                },
                'balanced_spender': {
                    'drake_pointing': {
                        'top': 'Random spending',
                        'bottom': 'Balanced income & expenses'
                    },
                    'success_kid': 'Balanced income and expenses this month!',
                    'this_is_fine': 'Moderate spending, moderate saving. Balanced.',
                    'expanding_brain': [
                        'Plan expenses',
                        'Track every transaction',
                        'Budget allocation',
                        'Financial zen master'
                    ],
                    'distracted_boyfriend': {
                        'boyfriend': 'Me',
                        'girlfriend': 'Balanced budget',
                        'other_woman': '50% off sale'
                    },
                    'two_buttons': {
                        'button1': 'Spend according to plan',
                        'button2': 'Be flexible with budget'
                    },
                    'change_my_mind': 'Balanced income-expense is the key to happiness',
                    'woman_yelling_cat': {
                        'woman': 'HOW DO YOU MANAGE YOUR MONEY?',
                        'cat': '...just moderate'
                    },
                    'stonks': 'Financial balance üìä',
                    'panik_kalm': {
                        'panik1': 'Spent too much this month',
                        'kalm': 'But still within plan',
                        'panik2': 'Need to rebalance next month'
                    },
                    'galaxy_brain': [
                        'Plan expenses',
                        'Save with goals',
                        'Invest with strategy',
                        'Finance = zen'
                    ]
                }
            }
        }

    def generate_weekly_meme(self, user_transactions=None) -> Dict[str, Any]:
        """Generate a weekly meme based on user's spending patterns"""
        
        # Create cache key based on date and language
        today = datetime.now().date()
        cache_key = f"weekly_meme_{today}_{self.language}"
        
        # Check cache first (cache for 1 hour to allow some variation)
        if not user_transactions:  # Only cache when using real data
            cached_meme = cache.get(cache_key)
            if cached_meme:
                return cached_meme
        
        # Get weekly analysis
        analysis = self._analyze_weekly_spending(user_transactions)
        
        # Determine personality
        personality = self._determine_personality(analysis)
        
        # Choose meme template
        template = self._choose_meme_template(personality)
        
        # Generate meme text
        meme_text = self._generate_meme_text(personality, template, analysis)
        
        # Create meme data
        meme_data = {
            'template': template,
            'personality': personality,
            'analysis': analysis,
            'text': meme_text,
            'image_url': f'/static/images/meme_templates/{self.meme_templates[template]["image"]}',
            'shareable_text': self._create_shareable_text(personality, analysis)
        }
        
        # Cache the result for 1 hour
        if not user_transactions:
            cache.set(cache_key, meme_data, 3600)
        
        return meme_data

    def _analyze_weekly_spending(self, user_transactions=None) -> Dict[str, Any]:
        """Analyze spending patterns for the past week"""
        
        # Get date range for past week
        end_date = datetime.now().date()
        start_date = end_date - timedelta(days=7)
        
        # Query transactions for the past week
        if user_transactions is None:
            transactions = Transaction.objects.filter(
                date__gte=start_date,
                date__lte=end_date
            )
        else:
            transactions = user_transactions
        
        # Calculate totals by type
        expense_total = abs(transactions.filter(
            transaction_type='expense'
        ).aggregate(total=Sum('amount'))['total'] or 0)
        
        saving_total = transactions.filter(
            transaction_type='saving'
        ).aggregate(total=Sum('amount'))['total'] or 0
        
        investment_total = transactions.filter(
            transaction_type='investment'
        ).aggregate(total=Sum('amount'))['total'] or 0
        
        # Calculate category breakdowns for expenses
        category_totals = {}
        expense_transactions = transactions.filter(transaction_type='expense')
        
        for transaction in expense_transactions:
            category = transaction.expense_category or 'other'
            if category not in category_totals:
                category_totals[category] = 0
            category_totals[category] += abs(transaction.amount)
        
        # Find dominant category
        dominant_category = max(category_totals.items(), key=lambda x: x[1]) if category_totals else ('other', 0)
        
        # Calculate transaction frequency
        transaction_count = transactions.count()
        
        return {
            'expense_total': expense_total,
            'saving_total': saving_total,
            'investment_total': investment_total,
            'net_total': saving_total + investment_total - expense_total,
            'category_totals': category_totals,
            'dominant_category': dominant_category[0],
            'dominant_category_amount': dominant_category[1],
            'transaction_count': transaction_count,
            'start_date': start_date,
            'end_date': end_date
        }

    def _determine_personality(self, analysis: Dict[str, Any]) -> str:
        """Determine user's spending personality based on analysis"""
        
        expense_total = analysis['expense_total']
        saving_total = analysis['saving_total']
        category_totals = analysis['category_totals']
        dominant_category = analysis['dominant_category']
        
        # Coffee Addict: >300k coffee/week
        coffee_amount = category_totals.get('coffee', 0)
        if coffee_amount > 300000:
            return 'coffee_addict'
        
        # Foodie Explorer: >1M food/week or food is dominant category with >500k
        food_amount = category_totals.get('food', 0)
        if food_amount > 1000000 or (dominant_category == 'food' and food_amount > 500000):
            return 'foodie_explorer'
        
        # Saving Master: high savings ratio (saving > 50% of total financial activity)
        total_financial_activity = expense_total + saving_total
        if total_financial_activity > 0 and (saving_total / total_financial_activity) > 0.5:
            return 'saving_master'
        
        # Default: Balanced Spender
        return 'balanced_spender'

    def _choose_meme_template(self, personality: str) -> str:
        """Choose appropriate meme template based on personality"""
        
        # Get weighted choices for this personality
        template_weights = []
        for template, data in self.meme_templates.items():
            weight = data['personality_weights'].get(personality, 1)
            template_weights.extend([template] * weight)
        
        # Randomly choose with weights
        return random.choice(template_weights) if template_weights else 'drake_pointing'

    def _generate_meme_text(self, personality: str, template: str, analysis: Dict[str, Any]) -> Dict[str, Any]:
        """Generate meme text based on personality and template"""
        
        texts = self.meme_texts.get(self.language, self.meme_texts['vi'])
        personality_texts = texts.get(personality, texts['balanced_spender'])
        
        if template in personality_texts:
            base_text = personality_texts[template]
            
            # Customize text with actual data
            if isinstance(base_text, dict):  # Drake pointing format
                return base_text
            elif isinstance(base_text, list):  # Expanding brain format
                return {'levels': base_text}
            else:  # Single text format
                return {'text': base_text}
        
        # Fallback
        return {'text': 'Chi ti√™u c·ªßa b·∫°n tu·∫ßn n√†y th·∫≠t th√∫ v·ªã! ü§î'}

    def _create_shareable_text(self, personality: str, analysis: Dict[str, Any]) -> str:
        """Create shareable text for social media"""
        
        personality_labels_map = {
            'vi': {
                'coffee_addict': f"‚òï Coffee Addict - Chi {analysis['category_totals'].get('coffee', 0):,}‚Ç´ cho coffee tu·∫ßn n√†y!",
                'foodie_explorer': f"üçú Foodie Explorer - Kh√°m ph√° ·∫©m th·ª±c v·ªõi {analysis['category_totals'].get('food', 0):,}‚Ç´!",
                'saving_master': f"üí∞ Saving Master - Ti·∫øt ki·ªám {analysis['saving_total']:,}‚Ç´ tu·∫ßn n√†y!",
                'balanced_spender': f"‚öñÔ∏è Balanced Spender - C√¢n b·∫±ng chi ti√™u kh√° t·ªët!"
            },
            'en': {
                'coffee_addict': f"‚òï Coffee Addict - Spent {analysis['category_totals'].get('coffee', 0):,}‚Ç´ on coffee this week!",
                'foodie_explorer': f"üçú Foodie Explorer - Food adventures cost {analysis['category_totals'].get('food', 0):,}‚Ç´!",
                'saving_master': f"üí∞ Saving Master - Saved {analysis['saving_total']:,}‚Ç´ this week!",
                'balanced_spender': f"‚öñÔ∏è Balanced Spender - Pretty good balance!"
            }
        }
        
        personality_labels = personality_labels_map.get(self.language, personality_labels_map['vi'])
        
        return personality_labels.get(personality, personality_labels['balanced_spender'])

    def get_spending_analysis(self) -> Dict[str, Any]:
        """Get detailed spending analysis for the week"""
        
        analysis = self._analyze_weekly_spending()
        personality = self._determine_personality(analysis)
        
        return {
            'analysis': analysis,
            'personality': personality,
            'insights': self._generate_insights(analysis, personality)
        }

    def _generate_insights(self, analysis: Dict[str, Any], personality: str) -> List[str]:
        """Generate spending insights"""
        
        insights = []
        
        insight_templates = {
            'vi': {
                'dominant_category': "Category chi ti√™u nhi·ªÅu nh·∫•t: {category} ({amount:,}‚Ç´)",
                'high_frequency': "B·∫°n c√≥ {count} giao d·ªãch tu·∫ßn n√†y - kh√° t√≠ch c·ª±c!",
                'low_frequency': "√çt giao d·ªãch tu·∫ßn n√†y - c√≥ th·ªÉ b·∫°n ƒëang ti·∫øt ki·ªám?",
                'positive_balance': "Tuy·ªát v·ªùi! B·∫°n c√≥ s·ªë d∆∞ d∆∞∆°ng {amount:,}‚Ç´ tu·∫ßn n√†y",
                'negative_balance': "Chi ti√™u nhi·ªÅu h∆°n ti·∫øt ki·ªám tu·∫ßn n√†y"
            },
            'en': {
                'dominant_category': "Top spending category: {category} ({amount:,}‚Ç´)",
                'high_frequency': "You had {count} transactions this week - quite active!",
                'low_frequency': "Few transactions this week - maybe you're saving?",
                'positive_balance': "Great! You have positive balance of {amount:,}‚Ç´ this week",
                'negative_balance': "Spent more than saved this week"
            }
        }
        
        templates = insight_templates.get(self.language, insight_templates['vi'])
        
        # Category insights
        if analysis['dominant_category_amount'] > 0:
            insights.append(templates['dominant_category'].format(
                category=analysis['dominant_category'],
                amount=analysis['dominant_category_amount']
            ))
        
        # Frequency insights
        if analysis['transaction_count'] > 20:
            insights.append(templates['high_frequency'].format(count=analysis['transaction_count']))
        elif analysis['transaction_count'] < 5:
            insights.append(templates['low_frequency'])
        
        # Net total insights
        if analysis['net_total'] > 0:
            insights.append(templates['positive_balance'].format(amount=analysis['net_total']))
        else:
            insights.append(templates['negative_balance'])
        
        return insights
