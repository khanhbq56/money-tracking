# Generated by Django 5.2.2 on 2025-06-18 05:21

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('transactions', '0004_alter_monthlytotal_user_alter_transaction_user'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.RenameField(
            model_name='monthlytotal',
            old_name='last_updated',
            new_name='updated_at',
        ),
        migrations.RemoveField(
            model_name='monthlytotal',
            name='net_total',
        ),
        migrations.RemoveField(
            model_name='monthlytotal',
            name='total_expense',
        ),
        migrations.RemoveField(
            model_name='monthlytotal',
            name='total_investment',
        ),
        migrations.RemoveField(
            model_name='monthlytotal',
            name='total_saving',
        ),
        migrations.AddField(
            model_name='monthlytotal',
            name='expense_amount',
            field=models.DecimalField(decimal_places=2, default=0, max_digits=15, verbose_name='Expense Amount'),
        ),
        migrations.AddField(
            model_name='monthlytotal',
            name='investment_amount',
            field=models.DecimalField(decimal_places=2, default=0, max_digits=15, verbose_name='Investment Amount'),
        ),
        migrations.AddField(
            model_name='monthlytotal',
            name='saving_amount',
            field=models.DecimalField(decimal_places=2, default=0, max_digits=15, verbose_name='Saving Amount'),
        ),
        migrations.AddField(
            model_name='monthlytotal',
            name='total_amount',
            field=models.DecimalField(decimal_places=2, default=0, max_digits=15, verbose_name='Total Amount'),
        ),
        migrations.AddField(
            model_name='monthlytotal',
            name='transaction_count',
            field=models.IntegerField(default=0),
        ),
        migrations.AlterField(
            model_name='monthlytotal',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='monthly_totals', to=settings.AUTH_USER_MODEL, verbose_name='User'),
        ),
        migrations.AlterField(
            model_name='transaction',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transactions', to=settings.AUTH_USER_MODEL, verbose_name='User'),
        ),
        migrations.CreateModel(
            name='UserBankConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bank_code', models.CharField(choices=[('tpbank', 'TPBank'), ('vcb', 'Vietcombank'), ('techcombank', 'Techcombank'), ('bidv', 'BIDV'), ('mbbank', 'MB Bank'), ('acb', 'ACB'), ('sacombank', 'Sacombank')], max_length=20)),
                ('is_enabled', models.BooleanField(default=False)),
                ('account_suffix', models.CharField(blank=True, help_text='Last 4 digits of account to match transactions', max_length=10, null=True)),
                ('sync_start_date', models.DateField(blank=True, help_text='Start syncing from this date', null=True)),
                ('last_sync_at', models.DateTimeField(blank=True, null=True)),
                ('last_successful_sync', models.DateTimeField(blank=True, null=True)),
                ('sync_error_count', models.IntegerField(default=0)),
                ('last_sync_error', models.TextField(blank=True, null=True)),
                ('sender_email_pattern', models.CharField(blank=True, help_text='Email pattern to match bank emails', max_length=255, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bank_configs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Bank Configuration',
                'verbose_name_plural': 'User Bank Configurations',
                'unique_together': {('user', 'bank_code')},
            },
        ),
        migrations.CreateModel(
            name='BankEmailTransaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email_message_id', models.CharField(help_text='Gmail message ID for deduplication', max_length=255, unique=True)),
                ('email_date', models.DateTimeField(help_text='Date email was received')),
                ('email_subject', models.CharField(blank=True, max_length=255, null=True)),
                ('transaction_type', models.CharField(choices=[('expense', 'üî¥ Chi ti√™u'), ('saving', 'üü¢ Ti·∫øt ki·ªám'), ('investment', 'üîµ ƒê·∫ßu t∆∞')], max_length=20)),
                ('amount', models.DecimalField(decimal_places=2, help_text='Positive for income/investment, negative for expense', max_digits=12)),
                ('description', models.CharField(max_length=255)),
                ('date', models.DateField(help_text='Transaction date (parsed from email)')),
                ('expense_category', models.CharField(blank=True, choices=[('food', 'üçú ƒÇn u·ªëng'), ('coffee', '‚òï Coffee'), ('transport', 'üöó Di chuy·ªÉn'), ('shopping', 'üõí Mua s·∫Øm'), ('entertainment', 'üé¨ Gi·∫£i tr√≠'), ('health', 'üè• S·ª©c kh·ªèe'), ('education', 'üìö Gi√°o d·ª•c'), ('utilities', '‚ö° Ti·ªán √≠ch'), ('other', 'üì¶ Kh√°c')], max_length=50, null=True)),
                ('ai_confidence', models.FloatField(default=0.0, help_text='AI confidence score (0.0-1.0)')),
                ('parsing_method', models.CharField(choices=[('gemini', 'Gemini AI'), ('regex', 'Regex')], default='gemini', max_length=20)),
                ('is_processed', models.BooleanField(default=False, help_text='Whether converted to Transaction')),
                ('processed_at', models.DateTimeField(blank=True, null=True)),
                ('processing_error', models.TextField(blank=True, null=True)),
                ('retry_count', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('transaction_id', models.ForeignKey(blank=True, help_text='Created Transaction if processed', null=True, on_delete=django.db.models.deletion.SET_NULL, to='transactions.transaction')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bank_email_transactions', to=settings.AUTH_USER_MODEL)),
                ('bank_config', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='email_transactions', to='transactions.userbankconfig')),
            ],
            options={
                'verbose_name': 'Bank Email Transaction',
                'verbose_name_plural': 'Bank Email Transactions',
                'ordering': ['-email_date', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserGmailPermission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gmail_oauth_token', models.JSONField(blank=True, help_text='Gmail OAuth token for reading bank emails', null=True)),
                ('gmail_token_expires_at', models.DateTimeField(blank=True, null=True)),
                ('gmail_refresh_token', models.TextField(blank=True, null=True)),
                ('has_gmail_permission', models.BooleanField(default=False)),
                ('permission_granted_at', models.DateTimeField(blank=True, null=True)),
                ('permission_last_used', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='gmail_permission', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Gmail Permission',
                'verbose_name_plural': 'User Gmail Permissions',
            },
        ),
    ]
